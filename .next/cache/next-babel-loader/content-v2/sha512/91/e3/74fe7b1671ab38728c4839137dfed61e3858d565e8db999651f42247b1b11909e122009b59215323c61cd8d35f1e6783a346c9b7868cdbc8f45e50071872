{"ast":null,"code":"import _regeneratorRuntime from \"/Users/guy/Development/Web/Site/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/guy/Development/Web/Site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport matter from 'gray-matter';\nexport function formatDate(date) {\n  var splitDate = date.split('-');\n  var month = splitDate[1] - 1;\n  var options = {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  };\n  var today = new Date(splitDate[2], month, splitDate[0]);\n  return today.toLocaleDateString(\"en-US\", options);\n}\n\nfunction getDate(date) {\n  var splitDate = date.split('-');\n  var month = splitDate[1] - 1;\n  return new Date(splitDate[2], month, splitDate[0]);\n}\n\nexport function getPosts() {\n  return _getPosts.apply(this, arguments);\n}\n\nfunction _getPosts() {\n  _getPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var context, posts, _iterator, _step, key, post, content, meta, sorted;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            context = require.context('../posts', false, /\\.md$/);\n            posts = [];\n            _iterator = _createForOfIteratorHelper(context.keys());\n            _context.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 15;\n              break;\n            }\n\n            key = _step.value;\n            post = key.slice(2);\n            _context.next = 10;\n            return import(\"../posts/\".concat(post));\n\n          case 10:\n            content = _context.sent;\n            meta = matter(content[\"default\"]);\n            posts.push({\n              slug: post.replace('.md', ''),\n              title: meta.data.title,\n              date: meta.data.date,\n              description: meta.data.description\n            });\n\n          case 13:\n            _context.next = 5;\n            break;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](3);\n\n            _iterator.e(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n\n            _iterator.f();\n\n            return _context.finish(20);\n\n          case 23:\n            sorted = posts.sort(function (a, b) {\n              return getDate(b.date) - getDate(a.date);\n            });\n            console.log(sorted[0].date);\n            return _context.abrupt(\"return\", sorted);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 17, 20, 23]]);\n  }));\n  return _getPosts.apply(this, arguments);\n}\n\nexport function getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n}\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    var fileContent, meta, post, content;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return import(\"../posts/\".concat(slug, \".md\"));\n\n          case 2:\n            fileContent = _context2.sent;\n            meta = matter(fileContent[\"default\"]);\n            post = meta.data;\n            content = meta.content;\n            return _context2.abrupt(\"return\", {\n              title: post.title,\n              date: post.date,\n              description: post.description,\n              slug: slug,\n              content: content\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/guy/Development/Web/Site/api/index.js"],"names":["matter","formatDate","date","splitDate","split","month","options","day","year","today","Date","toLocaleDateString","getDate","getPosts","context","require","posts","keys","key","post","slice","content","meta","push","slug","replace","title","data","description","sorted","sort","a","b","console","log","getPostBySlug","fileContent"],"mappings":"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","sourcesContent":["import matter from 'gray-matter'\n\nexport function formatDate(date) {\n    var splitDate = date.split('-');\n    var month = splitDate[1] - 1;\n\n    const options = { day: 'numeric', month: 'long', year: 'numeric' };\n    const today = new Date(splitDate[2], month, splitDate[0]);\n\n    return today.toLocaleDateString(\"en-US\", options);\n}\n\nfunction getDate(date) {\n    var splitDate = date.split('-');\n    var month = splitDate[1] - 1;\n\n    return new Date(splitDate[2], month, splitDate[0]);\n}\n\nexport async function getPosts() {\n    const context = require.context('../posts', false, /\\.md$/)\n    const posts = []\n    for (const key of context.keys()) {\n        const post = key.slice(2);\n        const content = await import(`../posts/${post}`);\n        const meta = matter(content.default)\n        posts.push({\n            slug: post.replace('.md',''),\n            title: meta.data.title,\n            date: meta.data.date,\n            description: meta.data.description,\n        })\n    }\n    var sorted = posts.sort((a, b) => getDate(b.date) - getDate(a.date))\n    console.log(sorted[0].date)\n    return sorted\n}\nexport async function getPostBySlug(slug){\n    const fileContent = await import(`../posts/${slug}.md`)\n    const meta = matter(fileContent.default)\n    const post = meta.data\n    const content = meta.content\n    return {\n        title: post.title,\n        date: post.date,\n        description: post.description,\n        slug: slug,\n        content: content,\n    }\n}"]},"metadata":{},"sourceType":"module"}