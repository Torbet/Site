{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/guy/Development/Web/Site/node_modules/@babel/runtime/helpers/toArray\");\n\nexports.__esModule = true;\nexports[\"default\"] = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = _interopRequireWildcard(require(\"./prepare-destination\"));\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar _router = require(\"../router\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar customRouteMatcher = (0, _pathMatch[\"default\"])(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  var matchedPage = false;\n  var parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n  var fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(parsedAs.pathname), locales).pathname);\n  var resolvedHref;\n\n  var handleRewrite = function handleRewrite(rewrite) {\n    var matcher = customRouteMatcher(rewrite.source);\n    var params = matcher(parsedAs.pathname);\n\n    if (rewrite.has && params) {\n      var hasParams = (0, _prepareDestination.matchHas)({\n        headers: {\n          host: document.location.hostname\n        },\n        cookies: Object.fromEntries(document.cookie.split('; ').map(function (item) {\n          var _item$split = item.split('='),\n              _item$split2 = _toArray(_item$split),\n              key = _item$split2[0],\n              value = _item$split2.slice(1);\n\n          return [key, value.join('=')];\n        }))\n      }, rewrite.has, parsedAs.query);\n\n      if (hasParams) {\n        Object.assign(params, hasParams);\n      } else {\n        params = false;\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        return true;\n      }\n\n      var destRes = (0, _prepareDestination[\"default\"])(rewrite.destination, params, query, true);\n      parsedAs = destRes.parsedDestination;\n      asPath = destRes.newUrl;\n      Object.assign(query, destRes.parsedDestination.query);\n      fsPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _normalizeLocalePath.normalizeLocalePath)((0, _router.delBasePath)(asPath), locales).pathname);\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true;\n        resolvedHref = fsPathname;\n        return true;\n      } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n      resolvedHref = resolveHref(fsPathname);\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true;\n        return true;\n      }\n    }\n  };\n\n  var finished = false;\n\n  for (var i = 0; i < rewrites.beforeFiles.length; i++) {\n    var rewrite = rewrites.beforeFiles[i];\n\n    if (handleRewrite(rewrite)) {\n      finished = true;\n      break;\n    }\n  }\n\n  if (!pages.includes(fsPathname)) {\n    if (!finished) {\n      for (var _i = 0; _i < rewrites.afterFiles.length; _i++) {\n        var _rewrite = rewrites.afterFiles[_i];\n\n        if (handleRewrite(_rewrite)) {\n          finished = true;\n          break;\n        }\n      }\n    } // check dynamic route before processing fallback rewrites\n\n\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname);\n      matchedPage = pages.includes(resolvedHref);\n      finished = matchedPage;\n    }\n\n    if (!finished) {\n      for (var _i2 = 0; _i2 < rewrites.fallback.length; _i2++) {\n        var _rewrite2 = rewrites.fallback[_i2];\n\n        if (handleRewrite(_rewrite2)) {\n          finished = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return {\n    asPath: asPath,\n    parsedAs: parsedAs,\n    matchedPage: matchedPage,\n    resolvedHref: resolvedHref\n  };\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","matchedPage","parsedAs","fsPathname","handleRewrite","rewrite","matcher","params","hasParams","headers","host","document","cookies","Object","item","value","destRes","asPath","pages","resolvedHref","resolveHref","finished","i","rewrites"],"mappings":"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","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination, { matchHas } from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: {\n    beforeFiles: Rewrite[]\n    afterFiles: Rewrite[]\n    fallback: Rewrite[]\n  },\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n} {\n  let matchedPage = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  const handleRewrite = (rewrite: Rewrite) => {\n    const matcher = customRouteMatcher(rewrite.source)\n    let params = matcher(parsedAs.pathname)\n\n    if (rewrite.has && params) {\n      const hasParams = matchHas(\n        {\n          headers: {\n            host: document.location.hostname,\n          },\n          cookies: Object.fromEntries(\n            document.cookie.split('; ').map((item) => {\n              const [key, ...value] = item.split('=')\n              return [key, value.join('=')]\n            })\n          ),\n        } as any,\n        rewrite.has,\n        parsedAs.query\n      )\n\n      if (hasParams) {\n        Object.assign(params, hasParams)\n      } else {\n        params = false\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        return true\n      }\n      const destRes = prepareDestination(\n        rewrite.destination,\n        params,\n        query,\n        true\n      )\n      parsedAs = destRes.parsedDestination\n      asPath = destRes.newUrl\n      Object.assign(query, destRes.parsedDestination.query)\n\n      fsPathname = removePathTrailingSlash(\n        normalizeLocalePath(delBasePath(asPath), locales).pathname\n      )\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true\n        resolvedHref = fsPathname\n        return true\n      }\n\n      // check if we match a dynamic-route, if so we break the rewrites chain\n      resolvedHref = resolveHref(fsPathname)\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true\n        return true\n      }\n    }\n  }\n  let finished = false\n\n  for (let i = 0; i < rewrites.beforeFiles.length; i++) {\n    const rewrite = rewrites.beforeFiles[i]\n\n    if (handleRewrite(rewrite)) {\n      finished = true\n      break\n    }\n  }\n\n  if (!pages.includes(fsPathname)) {\n    if (!finished) {\n      for (let i = 0; i < rewrites.afterFiles.length; i++) {\n        const rewrite = rewrites.afterFiles[i]\n        if (handleRewrite(rewrite)) {\n          finished = true\n          break\n        }\n      }\n    }\n\n    // check dynamic route before processing fallback rewrites\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname)\n      matchedPage = pages.includes(resolvedHref)\n      finished = matchedPage\n    }\n\n    if (!finished) {\n      for (let i = 0; i < rewrites.fallback.length; i++) {\n        const rewrite = rewrites.fallback[i]\n        if (handleRewrite(rewrite)) {\n          finished = true\n          break\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}